import SCons.Defaults
import SCons
from SCons.Util import unique
import stat
import os
import sys
import subprocess
import glob
import shutil
from copy import deepcopy

baseDir = os.path.abspath("../")
sys.path.append(baseDir)

from CTSNGlobals import *
commonPath = getCommonPath(baseDir)
sys.path.append(commonPath)

from Globals import *
from SethCommonGlobals import *
from SConstructGlobals import *

#Make common environment
projectName = "CTSNCommon"
targetFlags = DOXYGEN_TARGET | CPP_CHECK_TARGET | TESTING_TARGET | PROJECT_TARGET
envBase = createBaseEnvironment(baseDir, commonPath, projectName, targetFlags, ARGUMENTS)

###
# Additional Flags
###
piBuild = ARGUMENTS.get('pi_build', '0') == '1'

additionalFlags = []

###
# Files to compile
###

###include paths:
systemPaths = []

#Put any additional include paths you need here.
includePaths = [includeDir, getDateVersionPath(commonPath),
                os.path.join(getOSPath(commonPath), includeDir),
                os.path.join(getCommonClassesPath(commonPath), includeDir),
		        baseDir]

testIncludePaths = [os.path.join(testDir, includeDir),
                    os.path.join(getCommonClassesPath(commonPath), testDir, includeDir),
                    os.path.join(getOSPath(commonPath), testDir, includeDir)]

###Source Files
dateVersionFile = (os.path.join(srcDir, 'CTSNCommonDateVersion.cpp'))

sourceFiles = filterSourceFiles(glob.glob(os.path.join(srcDir, '*.cpp')),
                                [dateVersionFile])
sourceTestFiles = glob.glob(os.path.join(testDir, '*.cpp')) + [getTestMain(commonPath)] + \
                  glob.glob(os.path.join(testDir, srcDir, '*.cpp'))

#Remove any files that dont need to be tested.
allTestSourceFiles = filterSourceFiles(sourceFiles + sourceTestFiles, [])

coverageFiles = deepcopy(sourceFiles + [dateVersionFile])

###Libs

#Libs needed for the pi
piLibs = ['mariadbclient', 'z', 'm', 'ssl', 'crypto' ,'dl', 'rt']

#Libs needed on arch
archLibs = ['mysqlclient', 'z', 'm', 'ssl', 'crypto', 'dl', 'rt']

testLibs = ['CommonClasses-d', 'SethOS-d', 'PocoNet', 'PocoFoundation', 'PocoUtil']

if (ARGUMENTS.get('pi_build', '0') ==  '1'):
    testLibs += piLibs
else:
    testLibs += archLibs

###LibPath
testLibPath = [os.path.join(getOSPath(commonPath), libDir, envBase['SYSTEM'], debugDir, envBase['LIB_TYPE']),
               os.path.join(getCommonClassesPath(commonPath), libDir, envBase['SYSTEM'], debugDir, envBase['LIB_TYPE'])]

Help(getHelpMessage(envBase))

###
# Test outputs
###
createTestOutputFolder(envBase)

###
# Environment creation
###

def addFlags(env):
    env.Append(CCFLAGS = additionalFlags)
    for p in systemPaths:
        env.Append(CCFLAGS = ['-isystem', p])

#Debug Environment
debugEnvironment = createDebugEnvironment(envBase, includePaths, [], [])
addFlags(debugEnvironment)

#Release Environment
releaseEnvironment = createReleaseEnvironment(envBase, includePaths, [], [])
addFlags(releaseEnvironment)

#Unit test environment
testEnvironment = createUnitTestEnvironment(envBase, includePaths + testIncludePaths, testLibs, testLibPath)
addFlags(testEnvironment)

#Doxygen
doxygenFiles = [dateVersionFile] + sourceFiles + sourceTestFiles + glob.glob(os.path.join(includeDir, "*h")) + glob.glob(os.path.join(testDir, includeDir, "*h"))

###
# Targets
###

debugLib = createStaticLib(debugEnvironment, "ctsn_common-d",
                                          getCompiledObjectsWithDateVersionObject(debugEnvironment,
                                                                                  sourceFiles,
                                                                                  dateVersionFile, ARGUMENTS))

releaseLib = createStaticLib(releaseEnvironment, "ctsn_common",
                                               getCompiledObjectsWithDateVersionObject(releaseEnvironment,
                                                                                       sourceFiles,
                                                                                       dateVersionFile, ARGUMENTS))

(unitTestTarget, runTestTarget) = createUnitTestExe(testEnvironment,
                                                    getCompiledObjectsWithDateVersionObject(testEnvironment,
                                                                                            allTestSourceFiles,
                                                                                            dateVersionFile,
                                                                                            ARGUMENTS),
                                                    coverageFiles)

otherIncludeFiles = [os.path.join(getCppUTestPath(commonPath), includeDir), os.path.join(getGMockPath(commonPath), includeDir)] + systemPaths
doxygenTarget = createDoxygenTarget(envBase, testEnvironment['CPPPATH'] + otherIncludeFiles, 'CTSN Common')

cppCheckTarget = createCppCheckTarget(releaseEnvironment, coverageFiles)

(netBeansTarget, vsTarget, CodeBlocksTarget) = createProjectTargets(envBase, testEnvironment['CPPPATH'] + otherIncludeFiles, "CTSNGateway")

Alias(DEBUG_LIB_ALIAS, debugLib)
Alias(RELEASE_LIB_ALIAS, releaseLib)
Alias(CREATE_LIB_ALIAS, [debugLib, releaseLib])
Alias(DOXYGEN_ALIAS, doxygenTarget)
Alias(CPP_CHECK_ALIAS, cppCheckTarget)
Alias(UNIT_TEST_ALIAS, unitTestTarget)
Alias(RUN_TEST_ALIAS, [unitTestTarget, runTestTarget, cppCheckTarget])

Alias (NIGHTLY_ALIAS, [debugLib, releaseLib, doxygenTarget, cppCheckTarget, runTestTarget, netBeansTarget, vsTarget, CodeBlocksTarget])
Alias (DELTA_ALIAS, [debugLib, releaseLib, cppCheckTarget, runTestTarget])

Default([RUN_TEST_ALIAS])

