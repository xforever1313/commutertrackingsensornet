'''
This file will generate all the settings files based on the settings.xml file.
'''

import os
import argparse
from xml.dom import minidom

settings = {}

def getWarningStringCpp():
    return "// Warning! This file is autogenerated.\n" + \
           "// Please run GenerateSettings.py in the root\n" + \
           "// directory, and whatever you do, DO NOT COMMIT THIS FILE!\n"


def getWarningStringPy():
    return "# Warning! This file is autogenerated. \n" + \
           "# Please run GenerateSettings.py in the root \n" + \
           "# directory, and whatever you do, DO NOT COMMIT THIS FILE!\n"

def exportDjangoSettings():
    outFile = open('website/ctsn/Secrets.py', 'w')
    outFile.write(getWarningStringPy())
    outFile.write('\ndjango_key = "' + settings['django_key'] + '"')
    outFile.write('\ndjango_host = "' + settings['django_host'] + '"')
    outFile.write('\nmariadb_user = "' + settings['database_admin'] + '"')
    outFile.write('\nmariadb_pass = "' + settings['database_password'] + '"')
    outFile.write('\nmariadb_port = ' + settings['mariadb_port'])
    outFile.write('\nmariadb_ip = "' + settings['mariadb_ip'] + '"')
    outFile.write('\nmariadb_name = "' + settings['mariadb_name'] + '"')

    outFile.close()

def exportWindbeltSettings():
    if (not os.path.isdir('windbelt_capturer/include')):
        os.mkdir('windbelt_capturer/include')
    outFile = open('windbelt_capturer/include/WindbeltSettings.h', 'w')
    outFile.write(getWarningStringCpp())
    outFile.write('\n#include <string>')
    outFile.write('\nconst short port = ' + settings['windbelt_port'] + ';')
    outFile.write('\nconst std::string userAgent = "' + \
                  settings['windbelt_agent'] + '";')
    outFile.write('\nconst std::string mariadbUser = "' + \
                   settings['mariadb_user'] + '";')
    outFile.write('\nconst std::string mariadbPass = "' + \
                   settings['mariadb_pass'] + '";')
    outFile.write('\nconst short mariadbPort = ' + \
                   settings['mariadb_port'] + ';')
    outFile.write('\nconst std::string mariadbIP = "' + \
                   settings['mariadb_ip'] + '";')
    outFile.write('\nconst std::string databaseName = "' + \
                   settings['mariadb_name'] + '";')
    outFile.close()

def exportScriptSettings():
    outFile = open('gateway/scripts/Secrets.py', 'w')
    outFile.write(getWarningStringPy())
    outFile.write('\nmariadb_user = "' + settings['mariadb_user'] + '"')
    outFile.write('\nmariadb_pass = "' + settings['mariadb_pass'] + '"')
    outFile.write('\nmariadb_port = ' + settings['mariadb_port'])
    outFile.write('\nmariadb_ip = "' + settings['mariadb_ip'] + '"')
    outFile.write('\nmariadb_name = "' + settings['mariadb_name'] + '"')
    outFile.write('\ngateway_user_agent = "' + settings['gateway_agent'] + '"')
    outFile.write('\ngateway_port = ' + settings['gateway_port'])


    outFile.close()


def parseXML(fileName):
    xmldoc = minidom.parse(fileName)

    #Parse DJango settings
    djangoSettings = xmldoc.getElementsByTagName('django')
    settings['django_key'] = djangoSettings[0].attributes['key'].value
    settings['django_host'] = djangoSettings[0].attributes['host'].value
    settings['database_admin'] = djangoSettings[0].attributes['database_admin'].value
    settings['database_password'] = djangoSettings[0].attributes['database_password'].value

    #Parse mariadb settings
    mariadbSettings = xmldoc.getElementsByTagName('mariadb')
    settings['mariadb_user']  = mariadbSettings[0].attributes['user'].value
    settings['mariadb_pass']  = mariadbSettings[0].attributes['pass'].value
    settings['mariadb_port'] = mariadbSettings[0].attributes['port'].value
    settings['mariadb_ip'] = mariadbSettings[0].attributes['ip'].value
    settings['mariadb_name'] = mariadbSettings[0].attributes['name'].value

    #Parse Gateway settings
    gatewaySettings = xmldoc.getElementsByTagName('gateway')
    settings['gateway_ip'] = gatewaySettings[0].attributes['ip'].value
    settings['gateway_agent'] = gatewaySettings[0].attributes['agent'].value
    settings['gateway_port'] = gatewaySettings[0].attributes['port'].value

    #parse windbelt settings
    winbeltSettings = xmldoc.getElementsByTagName('windbelt_settings')
    settings['windbelt_port'] = winbeltSettings[0].attributes['port'].value
    settings['windbelt_agent'] = winbeltSettings[0].attributes['agent'].value

if __name__ == "__main__":
    argParser = argparse.ArgumentParser(description = "Generates the settings files based on the passed in xml file")
    argParser.add_argument("--file",
                           dest="xmlFile",
                           action="store",
                           default = "settings.xml",
                           help="The settings file to read in")

    args = argParser.parse_args()

    parseXML(args.xmlFile)
    exportDjangoSettings()
    exportWindbeltSettings()
    exportScriptSettings()

