import os
import subprocess
import sys
import time

baseDir = os.path.abspath("../")
sys.path.append(baseDir)

from CTSNGlobals import *
commonPath = getCommonPath(baseDir)
sys.path.append(commonPath)

from Globals import *
from SethCommonGlobals import *
from SConstructGlobals import *

from Secrets import *

# Only run one job at a time!
SetOption('num_jobs', 1)

###
# Constants
###
fitnesseCSSLocation = "http://files.shendrick.net/fitnesse/css/"
fitnesseCSSFiles = ['fitnesse_pages.css', 'fitnesse_straight.css', 'fitnesse_wiki.css']

testLocation = 'FitNesseRoot/CTSNTests/RegressionTests'

###
# Functions
###
def checkForJavaExceptions(fitnesseLogContents):
    if ("java.lang.RuntimeException" in fitnesseLogContents):
        raise Exception("Fitnesse error: java.lang.RuntimeException")
    elif ("java.io.IOException" in fitnesseLogContents):
        raise Exception("Fitnesse error: java.io.IOException")
    elif ("java.net.SocketException" in fitnesseLogContents):
        raise Exception("Fitnesse error: java.net.SocketException")

def addCSSToLog(fitnesseLogContents):
    i = fitnesseLogContents.find('<link rel="stylesheet"')
    newLog = fitnesseLogContents[:i]
    for f in fitnesseCSSFiles:
        newLog += '<link rel="stylesheet" type="text/css" href="' + fitnesseCSSLocation + f + '"/>\n'
    newLog += fitnesseLogContents[i:]

    return newLog

def runFitnesseProcess(testTarget, logFile):
    print ("Running " + testTarget.split('?')[0] + "...")
    fitnesseArgs = ['java', '-jar', 'fitnesse-standalone.jar', '-e', '1'] +\
                   ['-p', '5000', '-c', testTarget]

    fitnesseProc = subprocess.Popen(fitnesseArgs,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE)
    fitnesseLog = fitnesseProc.communicate()[0]

    status = fitnesseProc.wait()

    fitnesseLog = addCSSToLog(fitnesseLog)

    log = open(logFile, 'w')
    log.write(fitnesseLog)
    log.close()

    checkForJavaExceptions(fitnesseLog)
    print("")

    return status

###
# Builders
###
def createConstantsBuilder(target, source, env):
    outFile = open(str(target[0]), 'w')
    outFile.write('!1 DO NOT COMMIT THIS FILE!!! THIS IS AUTO GENERATED!\n\n')
    outFile.write('!1 Welcome to the CTSN Automated Tests Suite!\n\n')
    outFile.write('!define TEST_SYSTEM {slim}\n')
    outFile.write('!define SLIM_VERSION {0.0}\n')
    outFile.write('!define TEST_RUNNER {' + \
                   os.path.join(os.getcwd(),
                                'fixtures',
                                binDir,
                                env['SYSTEM'],
                                debugDir,
                                env['LIB_TYPE'],
                                'ctsn_autotest') + \
                  '}\n')

    outFile.write('!define COMMAND_PATTERN {%m}\n')
    outFile.write('!define COLLAPSE_SETUP {false}\n')
    outFile.write('!define COLLAPSE_TEARDOWN {false}\n')

    outFile.write('!define MARIADB_USER {' + mariadbUser + '}\n')
    outFile.write('!define MARIADB_PASS {' + mariadbPass + '}\n')
    outFile.write('!define MARIADB_PORT {' + str(mariadbPort) + '}\n')
    outFile.write('!define MARIADB_IP {' + mariadbIP + '}\n')
    outFile.write('!define DATABASE_NAME {' + databaseName + '}\n')
    outFile.write('!define GATEWAY_IP {' + gatewayIP + '}\n')
    outFile.write('!define GATEWAY_PORT {' + str(gatewayPort) + '}\n')
    outFile.write('!define GATEWAY_AGENT {' + str(gatewayAgent) + '}\n')
    outFile.write('!define NODE_IP {' + str(nodeIP) + '}\n')
    outFile.write('!define NODE_PORT {' + str(nodePort) + '}\n')
    outFile.write('!define NODE_AGENT {' + str(nodeAgent) + '}\n')

    outFile.write('!contents -g -p\n')

constantsBuilder = Builder(action = createConstantsBuilder,
                           suffix='.txt')

def runFitnesseBuilder(target, source, env):
    subprocess.call(['java', '-jar', 'fitnesse-standalone.jar', '-p', '9000'])

runBuilder = Builder(action = runFitnesseBuilder)

def runFitnesseTest(target, source, env):
    return runFitnesseProcess(env['TESTTARGET'], str(target[0]))

runTestBuilder = Builder(action = runFitnesseTest)

def runRegressionTest(logDir, env):
    createDir(logDir)

    testDirectories = os.listdir(testLocation)
    testsToRun = []

    # Remove setup, teardown, and other things we don't want to run
    # yet.
    testDirectories.remove('SetUp')
    testDirectories.remove('FixtureSetup')
    testDirectories.remove('FixtureTeardown')

    for possibleTest in testDirectories:
        if (os.path.isdir(os.path.join(testLocation, possibleTest))):
            testsToRun += [possibleTest]

    targets = []

    setupEnv = env.Clone(
        TESTTARGET = 'CTSNTests.RegressionTests.FixtureSetup?test'
    )

    setupTarget = setupEnv.runTest(target = [os.path.join(logDir, 'FixtureSetup.html')],
                                   source=[])

    for test in testsToRun:
        testEnv = env.Clone(
            TESTTARGET = 'CTSNTests.RegressionTests.' + test
        )
        testTarget = testEnv.runTest(target = [os.path.join(logDir, test + '.html')],
                                     source = [])

        # Ensure setup is run first
        Depends(testTarget, setupTarget)
        targets += testTarget

    teardownEnv = env.Clone(
        TESTTARGET = 'CTSNTests.RegressionTests.FixtureTeardown?test'
    )

    teardownTarget = teardownEnv.runTest(target = [os.path.join(logDir, 'FixtureTeardown.html')],
                                      source = [])

    # Ensure teardown is run last.
    Depends(teardownTarget, targets)

    return setupTarget + targets + teardownTarget

def runSmokeTest(logDir, env):
    createDir(logDir)

    setupEnv = env.Clone(
        TESTTARGET = 'CTSNTests.RegressionTests.FixtureSetup?test'
    )
    setupTarget = setupEnv.runTest(target = [os.path.join(logDir, 'FixtureSetup.html')],
                                   source=[])

    testEnv = env.Clone(
        TESTTARGET = 'CTSNTests.SmokeTests?suite'
    )
    testTarget = testEnv.runTest(target = [os.path.join(logDir, 'smoketest.html')],
                                 source = [])

    # Ensure test target runs after setup.
    Depends(testTarget, setupTarget)

    teardownEnv = env.Clone(
        TESTTARGET = 'CTSNTests.RegressionTests.FixtureTeardown?test'
    )
    teardownTarget = teardownEnv.runTest(target = [os.path.join(logDir, 'FixtureTeardown.html')],
                                          source = [])

    # Ensure teardown is run last.
    Depends(teardownTarget, testTarget)

    return setupTarget + testTarget + teardownTarget

###
# Environment Creation
###
projectName = "Fitnesse"
envBase = createBaseEnvironment(baseDir,
                                commonPath,
                                projectName,
                                0,
                                ARGUMENTS)

fitnesseEnvironment = envBase.Clone()
fitnesseEnvironment.Append(BUILDERS = {'constants' : constantsBuilder})
fitnesseEnvironment.Append(BUILDERS = {'runFitnesse' : runBuilder})
fitnesseEnvironment.Append(BUILDERS = {'runTest' : runTestBuilder})

###
# Log Creation
###
currentTime = time.strftime("%m_%d_%Y_%H_%M_%S")
logDir = os.path.join(os.getcwd(), 'logs')
createDir(logDir)
regresstionTestLog = os.path.join(logDir, 'regressionTest-' + currentTime)
smokeTestLog = os.path.join(logDir, 'smokeTest-' + currentTime)

###
# Target Creation
###
constants = fitnesseEnvironment.constants(target = "FitNesseRoot/CTSNTests/content.txt", source=['SConstruct', 'Secrets.py'])
runFitnesse = fitnesseEnvironment.runFitnesse(target = ['phony'], source = [])

smokeTest = runSmokeTest(smokeTestLog, fitnesseEnvironment)
regressionTest = runRegressionTest(regresstionTestLog, fitnesseEnvironment)

Depends(smokeTest, constants)
Depends(regressionTest, constants)
Depends(runFitnesse, constants)

Alias('constants', constants)
Alias('smoke_test', smokeTest)
Alias('regression_test', regressionTest)
Alias('run_fitnesse', runFitnesse)

Alias(NIGHTLY_ALIAS, regressionTest)
Alias(DELTA_ALIAS, smokeTest)

Default(runFitnesse)

