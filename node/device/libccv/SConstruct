import glob
import os
import sys

from multiprocessing import cpu_count

keilDir = "C:/Keil/ARM/ARMCC/bin"

SetOption('num_jobs', cpu_count())  #Sets -j to the number of cores 

###
# M4 Files
###
m4env = Environment(
    tools = ['mingw'],
    CC = os.path.join(keilDir, 'armcc'),
    CXX = os.path.join(keilDir, 'armcc'),
    AR = os.path.join(keilDir, 'armar'),
    LINK = os.path.join(keilDir, 'armlink'),
    AS = os.path.join(keilDir, 'armasm'),
    OBJPREFIX = 'obj/',
    
    CCFLAGS = ['--cpu', 'Cortex-M4.fp', '--li', '-O3',
               '--apcs=interwork', '--split_sections', '--asm',
               '--interleave', '--asm_dir', '.\\', '--gnu'],

    CPPPATH = ['.', '../../common', 'c:/Keil/ARM/RV31/INC',
               'C:/Keil/ARM/Pack/ARM/CMSIS/3.20.4/CMSIS/Include',
               '3rdparty/sha1'],

    CPPDEFINES = ['CORE_M4', 'IPC_MASTER', 'PIXY', '__MICROLIB'],
    
    ASFLAGS = ['--cpu', 'Cortex-M4.fp', '--li',
               '--apcs=interwork',
               '-I', 'c:/Keil/ARM/RV31/INC',
               '-I', 'C:/Keil/ARM/Pack/ARM/CMSIS/3.20.4/CMSIS/Include',
               '--pd', 'NO_CRP SETA 1',
			   '--pd', '__MICROLIB SETA 1'],
    ARFLAGS = ['-r'],
)

ccvFiles = glob.glob("*.c") + ['3rdparty/sha1/sha1out.c']
      
Alias('ccv', m4env.StaticLibrary(target = 'lib/libccv.lib', source = ccvFiles))
Alias('all', ['ccv'])
