import SCons.Defaults
import SCons
from SCons.Util import unique
import os
import sys
import subprocess
import glob
import shutil

baseDir = ".."
sys.path.append(baseDir)

from CTSNGlobals import *

if (sys.platform == "win32"):
    SCons.Defaults.DefaultEnvironment(tools = ['mingw'])

server_build = (ARGUMENTS.get('server_build', '0') == '1')
arm_build = (ARGUMENTS.get('arm_build', '0') == '1')
clang_build = (ARGUMENTS.get('clang_build', '0') == '1')
mingw_build = (ARGUMENTS.get('mingw', '0') == '1')
shared_build = (ARGUMENTS.get('shared', '0') == '1')
pi_build = (ARGUMENTS.get('pi_build', '0') == '1')
bbone_build = (ARGUMENTS.get('bbone_build', '0') == '1')

def buildDependenciesBuilder(target, source, env):
    additionalArgs = []
    if (server_build):
        additionalArgs += ['server_build=1']
    if (arm_build):
        additionalArgs += ['arm_build=1']
    if (clang_build):
        additionalArgs += ['clang_build=1']
    if (mingw_build):
        additionalArgs += ['mingw=1']
    if (shared_build):
        additionalArgs += ['shared=1']
    if (pi_build):
        additionalArgs += ['pi_build=1']
    if (bbone_build):
        additionalArgs += ['bbone_build=1']

    print "Building Seth Common"
    status = subprocess.call(['python', 'buildRelease.py'] + additionalArgs, cwd=os.path.join(getCommonPath(baseDir), 'build'))
    if (status == 0):
        f = open(str(target[0]), 'w')
        f.write("Dependencies built")
        f.close()
    return status

buildDependencies = Builder(action = buildDependenciesBuilder)

Help(
'''
SConstruct file for dependencies

Targets:
    delta, nightly, create_lib        Builds dependencies
'''
)

#Build dependencies
phonyTarget = "phony"
if (clang_build):
    phonyTarget += "Clang"
else:
    phonyTarget += "NotClang"

if (mingw_build):
    phonyTarget += "Mingw"
else:
    phonyTarget += "NotMingw"

if (shared_build):
    phonyTarget += "Shared"
else:
    phonyTarget += "Static"

if (arm_build):
    phonyTarget += "Arm"
else:
    phonyTarget += "NotArm"

if (pi_build):
    phonyTarget += "Pi"
else:
    phonyTarget += "NotPi"

if (bbone_build):
    phonyTarget += "bbone"
else:
    phonyTarget += "NotBbone"

phonyTarget += "Target.target"

buildEnvironment = Environment()
buildEnvironment.Append(BUILDERS = {'build' : buildDependencies})

commonFiles = []
for dirPath, dirnames, filenames in os.walk(getCommonPath(baseDir)):
        for fileName in [f for f in filenames if (f.endswith(".cpp") or f.endswith(".c") or f.endswith(".cc") or 
                         f.endswith(".h") or (f == "SConstruct") or (f == "Doxyfile") or f.endswith(".py"))]:
            commonFiles += [os.path.join(dirPath, fileName)]

buildTarget = buildEnvironment.build(target = phonyTarget, source = commonFiles)

Alias('delta', [buildTarget])
Alias('nightly', 'delta')
Alias('create_lib', 'delta')
Alias('doxygen', 'delta') #This is here so when an adopter accepts it, it will build okay

Clean(buildTarget, glob.glob('*.target'))

if (buildEnvironment.GetOption('clean')):
    status = subprocess.call("git clean -xdf", cwd=os.path.join(getCommonPath(baseDir)), shell=True)

Default('delta')

